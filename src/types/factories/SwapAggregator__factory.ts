/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SwapAggregator,
  SwapAggregatorInterface,
} from "../SwapAggregator";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amountOutMin",
        type: "uint256",
      },
    ],
    name: "bestSwap",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b03199081167368b3465833fb72a70ecdf485e0e4c7bd8665fc4517909155600180548216737a250d5630b4cf539739df2c5dacb4c659f2488d1790556002805490911673d9e1ce17f2641f24ae83637ab66a2cca9c378b9f179055610531806100866000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063b1c5a4e514610030575b600080fd5b61004361003e366004610425565b610055565b60405190815260200160405180910390f35b60006100956040518060400160405280601081526020017f7472616e73666572207374617274656400000000000000000000000000000000815250610319565b6040516370a0823160e01b81523060048201526000906001600160a01b038716906370a0823190602401602060405180830381865afa1580156100dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101009190610467565b905061010b8161035f565b600054610120906001600160a01b03166103a4565b60005460405163095ea7b360e01b81526001600160a01b039182166004820152602481018690529087169063095ea7b3906044016020604051808303816000875af1158015610173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101979190610480565b506101d66040518060400160405280601881526020017f7472616e7366657272656420616e6420617070726f7665640000000000000000815250610319565b60005460408051610100810182526001600160a01b0389811682528881166020830152610bb89282019290925233606082015291169063414bf3899060808101610222426103e86104a9565b8152602080820189905260408083018990526000606093840152805160e086811b7fffffffff0000000000000000000000000000000000000000000000000000000016825285516001600160a01b03908116600484015293860151841660248301529185015162ffffff16604482015292840151821660648401526080840151608484015260a084015160a484015260c084015160c4840152929092015190911660e4820152610104016020604051808303816000875af11580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f9190610467565b9695505050505050565b61035c8160405160240161032d91906104cf565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b1790526103e8565b50565b61035c8160405160240161037591815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f5b1bba960e01b1790526103e8565b6040516001600160a01b038216602482015261035c9060440160408051601f198184030181529190526020810180516001600160e01b031663161765e160e11b1790525b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b80356001600160a01b038116811461042057600080fd5b919050565b6000806000806080858703121561043b57600080fd5b61044485610409565b935061045260208601610409565b93969395505050506040820135916060013590565b60006020828403121561047957600080fd5b5051919050565b60006020828403121561049257600080fd5b815180151581146104a257600080fd5b9392505050565b600082198211156104ca57634e487b7160e01b600052601160045260246000fd5b500190565b600060208083528351808285015260005b818110156104fc578581018301518582016040015282016104e0565b8181111561050e576000604083870101525b50601f01601f191692909201604001939250505056fea164736f6c634300080d000a";

type SwapAggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapAggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapAggregator__factory extends ContractFactory {
  constructor(...args: SwapAggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SwapAggregator> {
    return super.deploy(overrides || {}) as Promise<SwapAggregator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SwapAggregator {
    return super.attach(address) as SwapAggregator;
  }
  override connect(signer: Signer): SwapAggregator__factory {
    return super.connect(signer) as SwapAggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapAggregatorInterface {
    return new utils.Interface(_abi) as SwapAggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapAggregator {
    return new Contract(address, _abi, signerOrProvider) as SwapAggregator;
  }
}
