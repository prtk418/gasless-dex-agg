/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SwapAggregator,
  SwapAggregatorInterface,
} from "../SwapAggregator";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amountOutMin",
        type: "uint256",
      },
    ],
    name: "bestSwap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b031990811673f164fc0ec4e93095b804a4795bbe1e041497b92a179091556001805490911673d9e1ce17f2641f24ae83637ab66a2cca9c378b9f1790556108c5806100686000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063b1c5a4e514610030575b600080fd5b61004361003e366004610664565b610055565b60405190815260200160405180910390f35b6040516323b872dd60e01b8152336004820152306024820152604481018390526000906001600160a01b038616906323b872dd906064016020604051808303816000875af11580156100ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100cf91906106a6565b506040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa158015610114573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013891906106cf565b5060015460405163095ea7b360e01b81526001600160a01b039182166004820152602481018590529086169063095ea7b3906044016020604051808303816000875af115801561018c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b091906106a6565b50600154604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201529086169063dd62ed3e90604401602060405180830381865afa158015610201573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022591906106cf565b50604080516002808252606082018352600092602083019080368337019050509050858160008151811061025b5761025b6106fe565b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061028f5761028f6106fe565b60200260200101906001600160a01b031690816001600160a01b03168152505060006102bb82866104e5565b905060608160ff1660000361035b57600080546001600160a01b0316906338ed173990889086306102ed42609661072a565b6040518663ffffffff1660e01b815260040161030d959493929190610786565b6000604051808303816000875af115801561032c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261035491908101906107c2565b90506103e5565b6001546001600160a01b03166338ed17398787863061037b42609661072a565b6040518663ffffffff1660e01b815260040161039b959493929190610786565b6000604051808303816000875af11580156103ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103e291908101906107c2565b90505b866001600160a01b03166323b872dd303384600186516104059190610880565b81518110610415576104156106fe565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af115801561048c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b091906106a6565b5080600182516104c09190610880565b815181106104d0576104d06106fe565b60200260200101519350505050949350505050565b6000805460405163d06ca61f60e01b815282916001600160a01b03169063d06ca61f906105189086908890600401610897565b600060405180830381865afa158015610535573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261055d91908101906107c2565b60015460405163d06ca61f60e01b81529192506000916001600160a01b039091169063d06ca61f906105959087908990600401610897565b600060405180830381865afa1580156105b2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105da91908101906107c2565b905080600182516105eb9190610880565b815181106105fb576105fb6106fe565b602002602001015182600184516106129190610880565b81518110610622576106226106fe565b6020026020010151111561063b57600092505050610642565b6001925050505b92915050565b80356001600160a01b038116811461065f57600080fd5b919050565b6000806000806080858703121561067a57600080fd5b61068385610648565b935061069160208601610648565b93969395505050506040820135916060013590565b6000602082840312156106b857600080fd5b815180151581146106c857600080fd5b9392505050565b6000602082840312156106e157600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561073d5761073d610714565b500190565b600081518084526020808501945080840160005b8381101561077b5781516001600160a01b031687529582019590820190600101610756565b509495945050505050565b85815284602082015260a0604082015260006107a560a0830186610742565b6001600160a01b0394909416606083015250608001529392505050565b600060208083850312156107d557600080fd5b825167ffffffffffffffff808211156107ed57600080fd5b818501915085601f83011261080157600080fd5b815181811115610813576108136106e8565b8060051b604051601f19603f83011681018181108582111715610838576108386106e8565b60405291825284820192508381018501918883111561085657600080fd5b938501935b828510156108745784518452938501939285019261085b565b98975050505050505050565b60008282101561089257610892610714565b500390565b8281526040602082015260006108b06040830184610742565b94935050505056fea164736f6c634300080d000a";

type SwapAggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapAggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapAggregator__factory extends ContractFactory {
  constructor(...args: SwapAggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SwapAggregator> {
    return super.deploy(overrides || {}) as Promise<SwapAggregator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SwapAggregator {
    return super.attach(address) as SwapAggregator;
  }
  override connect(signer: Signer): SwapAggregator__factory {
    return super.connect(signer) as SwapAggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapAggregatorInterface {
    return new utils.Interface(_abi) as SwapAggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapAggregator {
    return new Contract(address, _abi, signerOrProvider) as SwapAggregator;
  }
}
